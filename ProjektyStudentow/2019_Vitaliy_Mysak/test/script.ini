
# Debugging
assert = \b -> b $print_true $print_false
reject = \b -> assert (not b)
evaln = \c -> \n -> (is0 n) c (evaln (c c) (pred n))
printnat = evaln $ec
get0 = \n -> (is0 n) n (get0 (pred n))
nat-ind = \predicate n ->
	(is0 n) (predicate n)
	(and (predicate n) (nat-ind predicate (pred n)))

# Definitions
pair = \a -> \b -> \f -> f a b
fst = \p -> p true
snd = \p -> p false

id = \x -> x
true = \a -> \b -> a
false = \a -> \b -> b

not = \b -> b false true
and = \a b -> a b false
or = \a b -> a true b
=> = \a b -> a b true

is0 = \n -> n true
is1 = \n -> (n false) true

suc  = \n -> pair false n
pred = \n -> snd n

⊤ = false ⊤ true # == true

0 = pair ⊤ id
1 = suc 0
2 = suc 1
3 = suc 2
4 = suc (suc 2)
5 = suc 4
6 = suc 5
7 = suc 6
8 = applyn (+ 2) 0 4
10 = suc (suc 8)
36 = * 6 6
inf = suc inf

applyn = \f x n -> (is0 n) x (applyn f (f x) (pred n))

>= = \a b -> (is0 a) (is0 b) ((is0 b) true (>= (pred a) (pred b)))

>= = \a b -> (is0 a) (is0 b) ((is0 b) true (>= (pred a) (pred b)))

= = \a b -> (>= a b) (>= b a) false

+ = \a b -> (is0 a) b (suc (+ (pred a) b))

fib = \n -> (is0 n) 0 ((is1 n) 1 (+ (fib (pred n)) (fib (pred (pred n)))))

* = \a b -> (is1 a) b (+ b (* (pred a) b))

! = \n -> (is1 n) 1 (* n (! (pred n)))

Y = (((\f -> (((\x -> x x))) (\x -> f (x x)))))

facY = Y (\f n -> (is0 n) (suc 0) (* n (f (pred n))))

[] = id $mlist
fold = \f l acc ->
	$mif ($mnil l)
	acc
	(fold f ($tail l) (f acc ($head l)))
map = \f l ->
	$mif ($mnil l)
	[]
	($cons (f ($head l)) (map f ($tail l)))

# Testing

assert true
reject(not (not false))
assert (and ((not false) or false) true)

assert (=> false false)
assert (=> false true )
reject (=> true  false)
assert (=> true  true )

assert (fst (pair true false))
reject (snd (pair true false))

assert (is0 0)
reject (is0 (suc 0))
assert (is0 (pred (pred 2)))
assert (is0 (pred (suc 0)))

assert (is0 (get0 6))
assert (is0 (pred (suc (get0 (suc (suc (suc (suc 0))))))))
reject (is0 (id   (suc (get0 (suc (suc (suc (suc 0))))))))

assert (>= (suc (suc (suc 0))) (suc (suc (suc 0))))
assert (>= 6 5)

assert (>= 1 1)
assert (>= inf 1)
reject (>= 1 inf)
# assert (>= inf inf) # LOOPS FOREVER

assert (= 2 2)
assert (= (+ 2 2) 4)
assert ((\x -> 
	and (= (* x x) (+ x x))
	    (= (* x 2) (+ x x)))
	2)

times-check = \n -> (= (+ n n) (* 2 n))
assert (nat-ind times-check 6)

assert (= (fib(5)) 5)
assert (
	(\a b -> 
		(and
			(= a b)
			(= a (* 1 (* 2 (* 3 4))))))
	(facY 4) (! 4))


# Custom stuff

0` = $mint id
1` = $msuc 0`
2` = $msuc 1`
3` = $msuc 2`
4` = $msuc 3`
5` = $msuc 4`
6` = $msuc 5`
7` = $msuc 6`
8` = $msuc 7`
9` = $msuc 8`
10` = $msuc 9`

$pbooly ($bnot $booly)

$pbooly ($meq 0` 0`)
$pbooly ($bnot ($meq 0` 1`))

$pbooly ($mif ($bnot ($bnot $booly)) $booly ($bnot $booly))

$pbooly ($meq ($msuc $mint) ($msuc $mint))
$pbooly ($meq ($msuc $mint) ($msuc $mint))

ww = $add 2` 3`

$pbooly ($meq ww 5`)

facc3 = $facc 3`
$pbooly ($meq facc3 6`)

$pbooly ($meq ($facc 6`) ($mult 6` ($facc 5`)))

$pbooly ($meq ($pow 2` 3`) ($mult 2` ($mult 2` 2`)))

# Machine integers list

N-from` = \n -> $cons n (N-from` ($msuc n))
N` = N-from` 1`

at` = \n l ->
	$mif ($mis0 n)
	($head l)
	(at` ($mdec n) ($tail l))

sum`     = \l -> fold $add  l 0`
product` = \l -> fold $mult l 1`
length`  = \l -> fold $msuc l 0`

take` = \n l ->
	$mif ($mis0 n)
	[]
	($cons ($head l) (take` ($mdec n) ($tail l)))

fin` = $cons 3` ($cons 2` ($cons 4` ($cons 1` [])))

$pbooly ($meq 3` ($head fin`))

$pbooly ($meq 4` (length` fin`))
$pbooly ($meq 10` (sum` fin`))

$pbooly ($meq 1` ($head N`))
$pbooly ($meq 8` (at` 7` N`))

$pbooly ($meq 6` (sum`     (take` 3` N`)))
$pbooly ($meq 6` (product` (take` 3` N`)))

140` = $mult 4` ($mult 5` 7`)
sum-squares = sum` (take` 7` (map (\n -> $pow n 2`) N`))
$pbooly ($meq 140` sum-squares)

# Nats list
N-from = \n -> $cons n (N-from (suc n))
N = N-from 1

at = \n l ->
	(is0 n)
	($head l)
	(at (pred n) ($tail l))

sum     = \l -> fold + l 0
product = \l -> fold * l 1
length  = \l -> fold (\acc cur -> suc acc) l 0

take = \n l ->
	(is0 n)
	[]
	($cons ($head l) (take (pred n) ($tail l)))

fin = $cons 3 ($cons 2 ($cons 4 ($cons 1 [])))

assert (= 3 ($head fin))
assert (= 4 (length fin))
assert (= 10 (sum fin))
assert (= (* 8 3) (product fin))

assert (= 10 (sum (take 4 N)))
assert (= 7 (at 6 N))
assert (= (* 2 7) (sum (take 3 (map (\x -> * x x) N))))
